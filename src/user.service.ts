import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Context, Markup } from 'telegraf';
import { Address } from './models/address.model';
import { Driver } from './models/drivers.model';
import { Search } from './models/searches.model';
import { Taxi } from './models/taxi.model';
import { User } from './models/users.model';
import { UserAddress } from './models/user_address.model';
import { uzReplyMessages } from './constants/reply-messages-in-uzb';
import { ruReplyMessages } from './constants/reply-messages-in-ru';
import { uzKeyboards } from './constants/keyboards-in-uzb';
import { ruKeyboards } from './constants/keyboards-in-rus';
import { getFullName } from './helpers/getFullAddressName';
import axios from 'axios';
import { onMainRUS, onMainUZB } from './helpers/onMain';
import { Microbus } from './models/microbus.model';

@Injectable()
export class UserService {
  constructor(
    @InjectModel(User) private readonly userRepo: typeof User,
    @InjectModel(Taxi) private readonly taxiRepo: typeof Taxi,
    @InjectModel(Search) private readonly searchRepo: typeof Search,
    @InjectModel(Address) private readonly addressRepo: typeof Address,
    @InjectModel(UserAddress) private readonly usAddrRepo: typeof UserAddress,
    @InjectModel(Driver) private readonly driverRepo: typeof Driver,
    @InjectModel(Microbus) private readonly microbusRepo: typeof Microbus,
  ) {}

  async onStart(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      // if (user.last_state === 'finish') {
      if (user.user_lang === 'UZB') {
        await ctx.reply(
          `Assalomu alaykum!\n¬´Lady Taxi¬ª botiga xush kelibsiz!`,
          {
            parse_mode: 'HTML',
            ...uzKeyboards.main_menu,
          },
        );
      } else if (user.user_lang === 'RUS') {
        await ctx.reply(`–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ¬´Lady Taxi¬ª!`, {
          parse_mode: 'HTML',
          ...ruKeyboards.main_menu,
        });
      }
      // } else
      if (user.last_state === 'user_lang') {
        // await this.selectLanguage(ctx);
      } else if (user.last_state === 'phone_number') {
        // await this.hearsRoyhatdanOtish(ctx);
      } else if (user.last_state === 'real_name') {
        // await this.realNameAlternative(ctx);
      } else if (user.last_state === 'ads_phone_number') {
        // await this.adsPhoneNumberAlternative(ctx, user.phone_number);
      } else if (user.last_state === 'driver') {
        await user.update({
          last_state: 'finish',
        });
      }
    } else {
      await this.userRepo.create({
        user_id: `${ctx.from.id}`,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
        username: ctx.from.username,
        last_state: 'user_lang',
      });
      await ctx.reply(
        `Assalomu alaykum! | –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\nTilni tanlang | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:`,
        {
          parse_mode: 'HTML',
          ...Markup.keyboard([["üá∫üáø O'zbek tili", 'üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫']])
            .oneTime()
            .resize(),
        },
      );
    }
  }

  async saveLang(ctx: Context, lang: string) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });

    if (user) {
      if (user.last_state === 'user_lang') {
        await user.update({ user_lang: lang, last_state: 'phone_number' });
        if (user.user_lang === 'UZB') {
          await ctx.reply(
            `Siz <b>¬´Lady Taxi¬ª</b> botidan ilk marta foydalanayotganingiz uchun,
        bir martalik ro'yxatdan o'tishingiz lozim!`,
            {
              parse_mode: 'HTML',
              ...Markup.keyboard(["‚úÖ Ro'yxatdan o'tish"]).oneTime().resize(),
            },
          );
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(
            `–¢–∞–∫ –∫–∞–∫ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º <b>¬´Lady Taxi¬ª</b>, 
        –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑!`,
            {
              parse_mode: 'HTML',
              ...Markup.keyboard(['‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']).oneTime().resize(),
            },
          );
        }
      } else if (user.last_state === 'change_lang') {
        await user.update({ user_lang: lang, last_state: 'finish' });
        if (user.user_lang === 'UZB') {
          await ctx.reply("Bot tili O'zbek tiliga o'zgartirildi");
          await ctx.reply(uzReplyMessages.to_main_menu[1], {
            parse_mode: 'HTML',
            ...uzKeyboards.main_menu,
          });
        } else if (user.user_lang === 'RUS') {
          await ctx.reply('–Ø–∑—ã–∫ –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
          await ctx.reply(ruReplyMessages.to_main_menu[1], {
            parse_mode: 'HTML',
            ...ruKeyboards.main_menu,
          });
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async registration(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'phone_number') {
        if (user.user_lang == 'UZB') {
          await ctx.reply(
            `Iltimos o'zingizni raqamingizni yuboring, <b>"Telefon raqamni yuborish"</b> tugmasini bosing! `,
            {
              parse_mode: 'HTML',
              ...Markup.keyboard([
                [Markup.button.contactRequest('üìû Telefon raqamni yuborish')],
              ])
                .oneTime()
                .resize(),
            },
          );
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(
            ` –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b>! `,
            {
              parse_mode: 'HTML',
              ...Markup.keyboard([
                [Markup.button.contactRequest('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')],
              ])
                .oneTime()
                .resize(),
            },
          );
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async onContact(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('contact' in ctx.message) {
        if (user.last_state === 'phone_number') {
          if (ctx.from.id == ctx.message.contact.user_id) {
            await user.update({
              phone_number: ctx.message.contact.phone_number,
              last_state: 'real_name',
            });

            if (user.user_lang === 'UZB') {
              await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
              await ctx.reply(
                `<b>Sizga murojaat qilish uchun quyidagi ismingizni tanlang:</b>`,
                {
                  parse_mode: 'HTML',
                  ...Markup.inlineKeyboard([
                    Markup.button.callback(
                      `Men ${ctx.from.first_name} ismini tanlayman`,
                      'savedefaultname',
                    ),
                  ]),
                },
              );
              await ctx.replyWithHTML('Yoki haqiqiy ismingizni kiriting:');
            } else if (user.user_lang === 'RUS') {
              await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
              await ctx.reply(
                `<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:</b>`,
                {
                  parse_mode: 'HTML',
                  ...Markup.inlineKeyboard([
                    Markup.button.callback(
                      `–Ø "${ctx.from.first_name}" –≤—ã–±–∏—Ä–∞—é –∏–º—è`,
                      'savedefaultname',
                    ),
                  ]),
                },
              );
              await ctx.replyWithHTML('–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è:');
            }
          } else {
            if (user.user_lang === 'UZB') {
              await ctx.reply(
                `Iltimos o'zingizni raqamingizni yuboring, <b>"Telefon raqamni yuborish"</b> tugmasini bosing! `,
                {
                  parse_mode: 'HTML',
                  ...Markup.keyboard([
                    [
                      Markup.button.contactRequest(
                        'üìû Telefon raqamni yuborish',
                      ),
                    ],
                  ])
                    .oneTime()
                    .resize(),
                },
              );
            } else if (user.user_lang === 'RUS') {
              await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
              await ctx.reply(
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b> –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É! `,
                {
                  parse_mode: 'HTML',
                  ...Markup.keyboard([
                    [
                      Markup.button.contactRequest(
                        'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                      ),
                    ],
                  ])
                    .oneTime()
                    .resize(),
                },
              );
            }
          }
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async onMessage(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    const driver = await this.driverRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('text' in ctx.message) {
        if (user.last_state === 'real_name') {
          await user.update({
            real_name: ctx.message.text,
            last_state: 'ads_phone_number',
          });
          if (user.user_lang === 'UZB') {
            await ctx.reply(
              `<b>Siz bilan bog'lanish uchun quyidagi telefon raqamingizni tanlang:</b>`,
              {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                  Markup.button.callback(
                    `Men ${user.phone_number} raqamini tanlayman`,
                    'savedefaultphone',
                  ),
                ]),
              },
            );
            await ctx.reply(
              'Yoki boshqa ishlab turgan telefon raqam kiriting (namuna: 931234567):',
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.reply(
              `<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:</b>`,
              {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                  Markup.button.callback(
                    `—è –≤—ã–±–∏—Ä–∞—é ${user.phone_number} –Ω–æ–º–µ—Ä`,
                    'savedefaultphone',
                  ),
                ]),
              },
            );
            await ctx.reply(
              '–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: 931234567):',
            );
          }
        } else if (user.last_state === 'ads_phone_number') {
          await user.update({
            ads_phone_number: ctx.message.text,
            last_state: 'finish',
          });

          if (user.user_lang === 'UZB') {
            await ctx.reply(
              `Siz muvaffaqqiyatli ro'yxatdan o'tdingiz!\n¬´Lady Taxi¬ª xizmatlaridan foydalanishingiz mumkin!`,
            );
            await ctx.reply(uzReplyMessages.to_main_menu[1], {
              parse_mode: 'HTML',
              ...uzKeyboards.main_menu,
            });
          } else if (user.user_lang === 'RUS') {
            await ctx.reply(
              `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ Lady Taxi!`,
            );
            await ctx.reply(ruReplyMessages.to_main_menu[1], {
              parse_mode: 'HTML',
              ...uzKeyboards.main_menu,
            });
          }
        } else if (user.last_state === 'change_name') {
          await user.update({
            real_name: ctx.message.text,
            last_state: 'finish',
          });
          if (user.user_lang == 'UZB') {
            await ctx.reply(`Ismingiz ${user.real_name}ga o'zgartirildi`, {
              parse_mode: 'HTML',
              ...uzKeyboards.main_menu,
            });
          } else {
            await ctx.reply(`–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${user.real_name}`, {
              parse_mode: 'HTML',
              ...ruKeyboards.main_menu,
            });
          }
        } else if (user.last_state === 'change_phone') {
          await user.update({
            ads_phone_number: ctx.message.text,
            last_state: 'finish',
          });
          if (user.user_lang === 'UZB') {
            await ctx.reply(
              `Telefon raqamingiz ${user.ads_phone_number} ga o'zgartirildi`,
              {
                parse_mode: 'HTML',
                ...uzKeyboards.main_menu,
              },
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.reply(
              `–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${user.ads_phone_number}`,
              {
                parse_mode: 'HTML',
                ...ruKeyboards.main_menu,
              },
            );
          }
        } else if (user.last_state === 'newmyaddress') {
          const userAddress = await this.usAddrRepo.findOne({
            where: { user_id: user.user_id },
            order: [['createdAt', 'DESC']],
          });
          if (userAddress) {
            if (userAddress.last_state === 'name') {
              await userAddress.update({
                address_name: ctx.message.text,
                last_state: 'location',
              });
              if (user.user_lang === 'UZB') {
                await ctx.reply(uzReplyMessages.when_add_address);
              }
            }
          } else {
            await ctx.reply('/start');
          }
        } else if (user.last_state === 'delivery') {
          const taxi = await this.taxiRepo.findOne({
            where: {
              user_id: String(ctx.from.id),
            },
            order: [['createdAt', 'DESC']],
          });
          if (!taxi) {
            return await ctx.reply("Taxi yo'q"); //---------------------------------------------------------------
          }
          if (taxi.taxi_state === 'from_location' && 'text' in ctx.message) {
            let str: string[];
            if (user?.user_lang === 'UZB') {
              str = [
                'Kiritilgan manzilni qidirish natijasi:',
                "Mo'ljal:",
                'Manzil:',
                'Shu manzilni tanlayman üëÜ',
                "Agar ko'rsatilgan manzillar to'g'ri kelmasa, manzilni to'liqroq kiritib ko'ring ‚úèÔ∏è yoki kartadan aniq lokatsiyani tanlang üó∫ .",
                `-manzili topilmadi. ${'\n'}Kerakli manzilga yaqin mo'ljalni kiriting yoki kartadan aniq lokatsiyani tanlang.`,
                'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
              ];
            } else {
              str = [
                '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É:',
                '–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:',
                '–ü–æ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:',
                '–Ø –≤—ã–±–∏—Ä–∞—é —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å üëÜ',
                '–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, ‚úèÔ∏è –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ üó∫ .',
                `- –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.${'\n'}–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å, –±–ª–∏–∂–∞–π—à—É—é –∫ –Ω—É–∂–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ.`,
                'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
              ];
            }
            let addresses;
            let search = await this.searchRepo.findOne({
              where: { request: ctx.message.text },
            });
            await ctx.sendChatAction('typing');
            await ctx.reply(str[0], {
              parse_mode: 'HTML',
              ...Markup.keyboard([[str[6]]]).resize(),
            });
            if (search) {
              search.request_count = search.dataValues.request_count + 1;
              await search.save();
              addresses = await this.addressRepo.findAll({
                where: { request_id: search.id },
              });
            } else {
              let data = await axios.get(
                `https://search-maps.yandex.ru/v1/?text=${
                  ctx.message.text
                }&type=geo&lang=${
                  user?.user_lang === 'RUS' ? 'ru_RU' : 'uz_UZ'
                }&apikey=${process.env.YANDEX_KEY}`,
              );
              addresses = data.data.features;
              if (!addresses.length) {
                ctx.reply(ctx.message.text + str[5]);
                return;
              }
              search = await this.searchRepo.create({
                request: ctx.message.text,
                founds:
                  data.data.properties.ResponseMetaData.SearchResponse.found,
              });
            }
            ctx.reply(str[4]);
            for (let place of addresses) {
              if ('properties' in place) {
                place = await this.addressRepo.create({
                  request_id: search.id,
                  coordinate_lon: place.geometry.coordinates[0],
                  coordinate_lat: place.geometry.coordinates[1],
                  address_name: place.properties.name,
                  address_text: place.properties.description,
                  bounded_top_lon: place.properties.boundedBy[0][0],
                  bounded_bottom_lon: place.properties.boundedBy[1][0],
                  bounded_top_lat: place.properties.boundedBy[0][1],
                  bounded_bottom_lat: place.properties.boundedBy[1][1],
                  full_text: JSON.stringify(place),
                });
              }
              await ctx.reply(
                `${str[1]} ${place.address_name} \n${str[2]} ${place.address_text}`,
                {
                  parse_mode: 'HTML',
                  ...Markup.inlineKeyboard([
                    [
                      {
                        text: str[3],
                        callback_data: `from-delivery-${place.id}`,
                      },
                    ],
                  ]),
                },
              );
            }
          } else if (
            taxi.taxi_state === 'to_location' &&
            'text' in ctx.message
          ) {
            let str: string[];
            if (user?.user_lang === 'UZB') {
              str = [
                'Kiritilgan manzilni qidirish natijasi:',
                "Mo'ljal:",
                'Manzil:',
                'Shu manzilni tanlayman üëÜ',
                "Agar ko'rsatilgan manzillar to'g'ri kelmasa, manzilni to'liqroq kiritib ko'ring ‚úèÔ∏è yoki kartadan aniq lokatsiyani tanlang üó∫ .",
                `-manzili topilmadi. ${'\n'}Kerakli manzilga yaqin mo'ljalni kiriting yoki kartadan aniq lokatsiyani tanlang.`,
                'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
              ];
            } else {
              str = [
                '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É:',
                '–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:',
                '–ü–æ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:',
                '–Ø –≤—ã–±–∏—Ä–∞—é —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å üëÜ',
                '–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, ‚úèÔ∏è –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ üó∫ .',
                `- –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.${'\n'}–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å, –±–ª–∏–∂–∞–π—à—É—é –∫ –Ω—É–∂–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ.`,
                'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
              ];
            }
            let addresses;
            let search = await this.searchRepo.findOne({
              where: { request: ctx.message.text },
            });
            await ctx.sendChatAction('typing');
            await ctx.reply(str[0], {
              parse_mode: 'HTML',
              ...Markup.keyboard([[str[6]]]).resize(),
            });
            if (search) {
              search.request_count = search.dataValues.request_count + 1;
              await search.save();
              addresses = await this.addressRepo.findAll({
                where: { request_id: search.id },
              });
            } else {
              let data = await axios.get(
                `https://search-maps.yandex.ru/v1/?text=${
                  ctx.message.text
                }&type=geo&lang=${
                  user?.user_lang === 'RUS' ? 'ru_RU' : 'uz_UZ'
                }&apikey=${process.env.YANDEX_KEY}`,
              );
              addresses = data.data.features;
              if (!addresses.length) {
                ctx.reply(ctx.message.text + str[5]);
                return;
              }
              search = await this.searchRepo.create({
                request: ctx.message.text,
                founds:
                  data.data.properties.ResponseMetaData.SearchResponse.found,
              });
            }
            ctx.reply(str[4]);
            for (let place of addresses) {
              if ('properties' in place) {
                place = await this.addressRepo.create({
                  request_id: search.id,
                  coordinate_lon: place.geometry.coordinates[0],
                  coordinate_lat: place.geometry.coordinates[1],
                  address_name: place.properties.name,
                  address_text: place.properties.description,
                  bounded_top_lon: place.properties.boundedBy[0][0],
                  bounded_bottom_lon: place.properties.boundedBy[1][0],
                  bounded_top_lat: place.properties.boundedBy[0][1],
                  bounded_bottom_lat: place.properties.boundedBy[1][1],
                  full_text: JSON.stringify(place),
                });
              }
              await ctx.reply(
                `${str[1]} ${place.address_name} \n${str[2]} ${place.address_text}`,
                {
                  parse_mode: 'HTML',
                  ...Markup.inlineKeyboard([
                    [
                      {
                        text: str[3],
                        callback_data: `to-delivery-${place.id}`,
                      },
                    ],
                  ]),
                },
              );
            }
          }
        } else if (user.last_state === 'car_number') {
          await this.driverRepo.update(
            {
              car_number: `${ctx.message.text}`,
            },
            {
              where: {
                user_id: `${ctx.from.id}`,
              },
            },
          );
          await this.userRepo.update(
            {
              last_state: 'tex-passport',
            },
            {
              where: {
                user_id: `${ctx.from.id}`,
              },
            },
          );
          if (user.user_lang == 'UZB') {
            await ctx.replyWithHTML(
              'Mashinaning tex-passporti raqamini kiriting !',
            );
          } else {
            await ctx.replyWithHTML(
              '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è !',
            );
          }
        } else if (user.last_state === 'tex-passport') {
          let data;
          try {
            data = await (
              await axios.get(
                `https://api-dtp.yhxbb.uz/api/egov/open_data/info_car?format=json&plate_number=${driver.car_number}&tech_pass=${ctx.message.text}`,
              )
            ).data;
          } catch (error) {
            if (user.user_lang == 'UZB') {
              await ctx.reply(
                'Texnik ruxsatnomangiz yoki mashina raqamingiz xato',
              );
            } else {
              await ctx.reply(
                '–í–∞—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ–≤–µ—Ä–Ω—ã',
              );
            }
          }
          if (data) {
            await this.driverRepo.update(
              {
                last_state: 'non-active',
                car_model: `${data.pModel}`,
                car_color: `${data.pVehicleColor}`,
                car_year: `${data.pYear}`,
              },
              {
                where: {
                  user_id: `${ctx.from.id}`,
                },
              },
            );
            await this.userRepo.update(
              {
                last_state: 'non-active',
              },
              {
                where: {
                  user_id: `${ctx.from.id}`,
                },
              },
            );
          } else {
            console.log('error');
          }
          const newDriver = await this.driverRepo.findOne({
            where: {
              user_id: `${ctx.from.id}`,
            },
          });
          await user.update({ last_state: 'finish' });
          await ctx.telegram.sendMessage(
            +process.env.ADMIN_ID,
            `${newDriver.first_name}\n ${newDriver.last_name}\n ${newDriver.car_model}\n ${newDriver.car_number}\n ${newDriver.car_year}\n ${newDriver.user_id}`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                Markup.button.callback(
                  '‚úÖ Tasdiqlayman',
                  `verify=${ctx.from.id}`,
                ),
                Markup.button.callback(
                  '‚ùå Rad qilinsin',
                  `otmen=${ctx.from.id}`,
                ),
              ]),
            },
          );
          if (user.user_lang == 'UZB') {
            await ctx.replyWithHTML(
              "Ma'lumotlaringiz <b>admin</b> ga yetkazildi. Admin ruxsat berishi bilan sizga activelik taqdim qilinadi",
            );
          } else {
            await ctx.replyWithHTML(
              '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ <b>admin</b>. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏—Ç –µ–µ.',
            );
          }
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async saveDefaultName(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'real_name') {
        await user.update({
          real_name: ctx.from.first_name || ctx.from.last_name,
          last_state: 'ads_phone_number',
        });
        if (user.user_lang === 'UZB') {
          await ctx.reply(
            `<b>Siz bilan bog'lanish uchun quyidagi telefon raqamingizni tanlang:</b>`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                Markup.button.callback(
                  `Men ${user.phone_number} raqamini tanlayman`,
                  'savedefaultphone',
                ),
              ]),
            },
          );
          await ctx.reply(
            'Yoki boshqa ishlab turgan telefon raqam kiriting (namuna: 931234567):',
          );
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(
            `<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:</b>`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                Markup.button.callback(
                  `—è –≤—ã–±–∏—Ä–∞—é ${user.phone_number} –Ω–æ–º–µ—Ä`,
                  'savedefaultphone',
                ),
              ]),
            },
          );
          await ctx.reply(
            '–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: 931234567):',
          );
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async saveDefaultNumber(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'ads_phone_number') {
        await user.update({
          ads_phone_number: user.phone_number,
          last_state: 'finish',
        });
        if (user.user_lang === 'UZB') {
          await ctx.reply(
            `Siz muvaffaqqiyatli ro'yxatdan o'tdingiz!\n¬´Lady Taxi¬ª xizmatlaridan foydalanishingiz mumkin!`,
          );
          await ctx.reply(uzReplyMessages.to_main_menu[1], {
            parse_mode: 'HTML',
            ...uzKeyboards.main_menu,
          });
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(
            `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ Lady Taxi!`,
          );
          await ctx.reply(ruReplyMessages.to_main_menu[1], {
            parse_mode: 'HTML',
            ...ruKeyboards.main_menu,
          });
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async hearsProfil(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.user_lang === 'UZB') {
        await ctx.reply(uzReplyMessages.select_section, {
          parse_mode: 'HTML',
          ...uzKeyboards.profile,
        });
      } else if (user.user_lang === 'RUS') {
        await ctx.reply(ruReplyMessages.select_section, {
          parse_mode: 'HTML',
          ...ruKeyboards.profile,
        });
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async replaceName(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        await user.update({ last_state: 'change_name' });
        if (user.user_lang === 'UZB') {
          await ctx.reply(uzReplyMessages.input_name, {
            parse_mode: 'HTML',
            ...uzKeyboards.cancel_replace_name,
          });
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(ruReplyMessages.input_name, {
            parse_mode: 'HTML',
            ...ruKeyboards.cancel_replace_name,
          });
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async replacePhoneNumber(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        await user.update({ last_state: 'change_phone' });

        if (user.user_lang == 'UZB') {
          await ctx.reply(`Yangi telefon raqam kiriting`, {
            parse_mode: 'HTML',
            ...uzKeyboards.cancel_replace_phone,
          });
        } else if (user.user_lang === 'RUS') {
          await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
            parse_mode: 'HTML',
            ...ruKeyboards.cancel_replace_phone,
          });
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async hearsMyAddresses(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        const userAddresses = await this.usAddrRepo.findAll({
          where: { user_id: `${ctx.from.id}` },
        });
        if (user.user_lang === 'UZB') {
          await ctx.reply(uzReplyMessages.input_constant_address, {
            parse_mode: 'HTML',
            ...uzKeyboards.input_constant_address,
          });
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(ruReplyMessages.input_constant_address, {
            parse_mode: 'HTML',
            ...ruKeyboards.input_constant_address,
          });
        }
        for (let i = 0; i < userAddresses.length; i++) {
          if (user.user_lang === 'UZB') {
            await ctx.reply(
              uzReplyMessages.all_taxi_addresses(
                userAddresses[i].address_name,
                userAddresses[i].full_address,
              ),
              {
                parse_mode: 'HTML',
                ...uzKeyboards.delete_my_address(userAddresses[i].id),
              },
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.reply(
              ruReplyMessages.all_taxi_addresses(
                userAddresses[i].address_name,
                userAddresses[i].full_address,
              ),
              {
                parse_mode: 'HTML',
                ...ruKeyboards.delete_my_address(userAddresses[i].id),
              },
            );
          }
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async actioMyNewAddress(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      await user.update({ last_state: 'newmyaddress' });
      await this.usAddrRepo.create({
        user_id: `${ctx.from.id}`,
        last_state: 'name',
      });

      if (user.user_lang === 'UZB') {
        await ctx.reply(uzReplyMessages.input_address_name, {
          parse_mode: 'HTML',
          ...uzKeyboards.cancel_add_address,
        });
      } else if (user.user_lang === 'RUS') {
        await ctx.reply(ruReplyMessages.input_address_name, {
          parse_mode: 'HTML',
          ...ruKeyboards.cancel_add_address,
        });
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async onLocation(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('location' in ctx.message) {
        if (user.last_state === 'newmyaddress') {
          const userAddress = await this.usAddrRepo.findOne({
            where: { user_id: user.user_id },
            order: [['createdAt', 'DESC']],
          });
          if (userAddress.last_state === 'location') {
            const fullAddress = await getFullName(
              ctx.message.location.latitude,
              ctx.message.location.longitude,
            );
            await userAddress.update({
              full_address: fullAddress.display_name,
              lat: String(ctx.message.location.latitude),
              lon: String(ctx.message.location.longitude),
              last_state: 'finish',
            });
            await user.update({ last_state: 'finish' });
            if (user.user_lang === 'UZB') {
              await ctx.reply(uzReplyMessages.after_adding_address, {
                parse_mode: 'HTML',
                ...uzKeyboards.main_menu,
              });
            } else if (user.user_lang === 'RUS') {
              await ctx.reply(ruReplyMessages.after_adding_address, {
                parse_mode: 'HTML',
                ...ruKeyboards.main_menu,
              });
            }
          }
        } else if (user.last_state === 'taxi') {
          const taxi = await this.taxiRepo.findOne({
            where: { user_id: user.user_id },
            order: [['createdAt', 'DESC']],
          });
          if (taxi) {
            if (taxi.taxi_state === 'from_location') {
              const lat = ctx.message.location.latitude;
              const long = ctx.message.location.longitude;
              const fullAddress = await getFullName(lat, long);

              taxi.update({
                from_lat: String(ctx.message.location.latitude),
                from_long: String(ctx.message.location.longitude),
                from_full_adr: fullAddress.display_name,
                taxi_state: 'to_location',
              });
              await taxi.save();

              if (user.user_lang === 'UZB') {
                await ctx.reply(
                  `Borish manzilingizni yuborish uchun Telegramning üìé tugmasi \norqali geolokatsiyani (–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, Location) tanlang yoki \nmanzilni botga xabar ko'rinishida yuboring:`,
                  {
                    parse_mode: 'HTML',
                    ...Markup.keyboard([['üôÖ‚Äç‚ôÄÔ∏è Bekor qilish']])
                      .oneTime()
                      .resize(),
                  },
                );
              } else if (user.user_lang === 'RUS') {
                await ctx.reply(
                  `–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ) –∫–Ω–æ–ø–∫–æ–π Telegram üìé –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:`,
                  {
                    parse_mode: 'HTML',
                    ...Markup.keyboard([['üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å']])
                      .oneTime()
                      .resize(),
                  },
                );
              }
            } else if (taxi.taxi_state === 'to_location') {
              const lat = ctx.message.location.latitude;
              const long = ctx.message.location.longitude;
              const fullAddress = await getFullName(lat, long);
              taxi.update({
                to_lat: String(ctx.message.location.latitude),
                to_long: String(ctx.message.location.longitude),
                to_full_adr: fullAddress.display_name,
              });
              await taxi.save();
              var config = {
                method: 'GET',
                url: `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${taxi.from_lat}%2C${taxi.from_long}&destinations=${taxi.to_lat}%2C${taxi.to_long}&key=${process.env.GOOGLE_API_KEY}`,
                headers: {},
              };
              const response = await axios(config);
              let distance_data = response.data;
              let distance = (
                distance_data.rows[0].elements[0].distance.value / 1000
              ).toFixed(1);
              let time = (
                distance_data.rows[0].elements[0].duration.value / 60
              ).toFixed();

              taxi.update({
                taxi_distance: +distance,
                taxi_time: +time,
                taxi_state: 'driver',
                info: 'confirm_location',
              });
              await taxi.save();
              if (user.user_lang === 'UZB') {
                await ctx.reply('Manzillarni tasdiqlang');
                const message = await ctx.reply(
                  `üî∞ Jo'nash manzilingiz: ${taxi.from_full_adr}\n\nüèÅ Borish manzilingiz: ${taxi.to_full_adr}\n\nMasofa: ${distance} km\nVaqti: ${time} min`,
                  {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                      Markup.button.callback(
                        '‚úÖ Tasdiqlayman',
                        'okconfirmlocation',
                      ),
                      Markup.button.callback(
                        'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
                        'noconfirmlocation',
                      ),
                    ]),
                  },
                );
                taxi.update({ message_id: message.message_id });
                await taxi.save();
              } else if (user.user_lang === 'RUS') {
                await ctx.reply('Manzillarni tasdiqlang');
                const message = await ctx.reply(
                  `üî∞ –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${taxi.from_full_adr}\n\nüèÅ –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${taxi.to_full_adr}\n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º\n–í—Ä–µ–º—è: ${time} –º–∏–Ω`,
                  {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard([
                      Markup.button.callback(
                        '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é',
                        'okconfirmlocation',
                      ),
                      Markup.button.callback(
                        'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å',
                        'noconfirmlocation',
                      ),
                    ]),
                  },
                );
                taxi.update({ message_id: message.message_id });
                await taxi.save();
              }
            }
          } else {
            await ctx.reply('/start');
          }
        } else if (user.last_state === 'delivery') {
          try {
            const user = await this.userRepo.findOne({
              where: { user_id: String(ctx.from.id) },
            });
            const taxi = await this.taxiRepo.findOne({
              where: {
                user_id: String(ctx.from.id),
              },
              order: [['createdAt', 'DESC']],
            });
            let latitude: number;
            let longitude: number;
            if ('location' in ctx.message) {
              latitude = ctx.message.location.latitude;
              longitude = ctx.message.location.longitude;
            }
            if (taxi?.taxi_state === 'from_location') {
              let data = await axios.get(
                `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`,
              );
              let str: string;
              let str1: string;
              if (user?.dataValues.user_lang === 'UZB') {
                str =
                  "Jo'natma yetkazish manzilini yuborish uchun Telegramning üìé tugmasi orqali üìç geolokatsiyani (–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, Location) tanlang yoki manzilni botga ‚úèÔ∏è xabar ko'rinishida yuboring:";
                str1 = 'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish';
              } else {
                str =
                  '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé –¢–µ–ª–µ–≥—Ä–∞–º–∞ –∏–ª–∏ ‚úèÔ∏è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:';
                str1 = 'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞';
              }
              taxi.from_full_adr = data.data.display_name;
              taxi.from_lat = String(latitude);
              taxi.from_long = String(longitude);
              taxi.taxi_state = 'to_location';
              await taxi.save();
              await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
              await ctx.reply(str, {
                parse_mode: 'HTML',
                ...Markup.keyboard([[str1]])
                  .oneTime()
                  .resize(),
              });
            } else if (taxi?.taxi_state === 'to_location') {
              let data = await axios.get(
                `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`,
              );
              let str: string;
              let str1: string;
              let str2: string;
              let str3: string;
              var config = {
                method: 'GET',
                url: `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${taxi.from_lat}%2C${taxi.from_long}&destinations=${latitude}%2C${longitude}&key=${process.env.GOOGLE_API_KEY}`,
                headers: {},
              };
              const response = await axios(config);
              let distance_data = response.data;
              let distance = (
                distance_data.rows[0].elements[0].distance.value / 1000
              ).toFixed(1);
              let time = (
                distance_data.rows[0].elements[0].duration.value / 60
              ).toFixed();

              if (user?.dataValues.user_lang === 'UZB') {
                str = 'Manzillarni tasdiqlang';
                str1 = 'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish';
                str2 = '‚úÖ Tasdiqlayman';
                str3 = `üî∞ Jo'natma turgan manzil: ${taxi.from_full_adr} \n\nüèÅ Jo'natmani yetkazish manzili: ${data.data.display_name} \n\nMasofa: ${distance} km\nVaqti: ${time} min`;
              } else {
                str = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞';
                str1 = 'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞';
                str2 = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é';
                str3 = `üî∞ –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: ${taxi.from_full_adr} \n\nüèÅ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${data.data.display_name} \n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º\n–í—Ä–µ–º—è: ${time} –º–∏–Ω`;
              }
              taxi.to_lat = String(latitude);
              taxi.to_long = String(longitude);
              taxi.to_full_adr = data.data.display_name;
              taxi.taxi_state = 'to_location';
              taxi.taxi_distance = Number(distance);
              taxi.taxi_time = Number(time);
              await taxi.save();
              await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
              await ctx.reply(str, { ...Markup.removeKeyboard() });
              await ctx.reply(str3, {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                  [
                    { text: str2, callback_data: 'accepted' },
                    { text: str1, callback_data: 'cancelled' },
                  ],
                ]),
              });
            }
          } catch (error) {
            console.log(error);
          }
        } else if (user.last_state === 'driver') {
          const taxiDriver = await this.taxiRepo.findOne({
            where: {
              driver_id: String(ctx.from.id),
            },
            order: [['createdAt', 'DESC']],
          });
          if (taxiDriver?.taxi_state === 'select_driver') {
            const passenger = await this.userRepo.findOne({
              where: { user_id: taxiDriver.dataValues.user_id },
            });
            let strDriver = [];
            let strPassenger = [];

            if (user.user_lang === 'UZB') {
              strDriver = [
                `Ismi: ${passenger.dataValues.first_name} \nTelefon raqami: ${passenger.dataValues.phone_number} \nXizmat narxi: ${taxiDriver.dataValues.taxi_price} so'm`,
                `üòî Mashina buzilib qoldi`,
                "Jo'nash manziliga yetib keldim",
                "Yo'lovchi sizni kutmoqda ...",
              ];
            } else {
              strDriver = [
                `–ò–º—è: ${passenger?.dataValues?.first_name} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${passenger?.dataValues?.phone_number} \n–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ${taxiDriver.dataValues.taxi_price} —Å—É–º`,
                'üòî –ú–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–ª–∞—Å—å',
                '–ø—Ä–∏–±—ã–ª –ø–æ –∞–¥—Ä–µ—Å—É',
                '–í–∞—Å –∂–¥–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä...',
              ];
            }
            let latitude: number;
            let longitude: number;
            if ('location' in ctx.message) {
              latitude = ctx.message.location.latitude;
              longitude = ctx.message.location.longitude;
            }
            var config = {
              method: 'GET',
              url: `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${latitude}%2C${longitude}&destinations=${taxiDriver.from_lat}%2C${taxiDriver.from_long}&key=${process.env.GOOGLE_API_KEY}`,
              headers: {},
            };
            const response = await axios(config);
            let distance_data = response.data;
            let distance = (
              distance_data.rows[0].elements[0].distance.value / 1000
            ).toFixed(1);
            let time = (
              distance_data.rows[0].elements[0].duration.value / 60
            ).toFixed();
            if (passenger.user_lang === 'UZB') {
              strPassenger = [
                `Taxi ${time} minutda yetib keladi. U sizdan ${distance} km masofada`,
                'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
              ];
            } else {
              strPassenger = [
                `Taxi ${time} minutda yetib keladi. U sizdan ${distance} km masofada`,
                'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
              ];
            }
            taxiDriver.taxi_state = 'driver_on_from_location';
            await taxiDriver.save();
            await ctx.sendChatAction('typing');
            await ctx.reply(strDriver[3], {
              parse_mode: 'HTML',
              ...Markup.removeKeyboard(),
            });
            await ctx.reply(strDriver[0], {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                [{ text: strDriver[2], callback_data: 'on_from_location' }],
                [{ text: strDriver[1], callback_data: 'broken_car' }],
              ]),
            });

            await ctx.telegram.sendMessage(
              taxiDriver.user_id,
              strPassenger[0],
              {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard([
                  [{ text: strPassenger[1], callback_data: 'cancelled_taxi' }],
                ]),
              },
            );
          }
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async deleteMyAddress(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('match' in ctx) {
        if (user.last_state === 'finish') {
          const id = ctx.match[0].slice(9);
          await this.usAddrRepo.destroy({ where: { id: id } });

          if (user.user_lang === 'UZB') {
            await ctx.reply(
              "Sizning doimiy manzilingiz muvaffaqiyatli o'chirildi",
              {
                parse_mode: 'HTML',
                ...uzKeyboards.main_menu,
              },
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.reply('–í–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', {
              parse_mode: 'HTML',
              ...ruKeyboards.main_menu,
            });
          }
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async actionForCallingTaxi(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        if (user.user_lang === 'UZB') {
          await ctx.reply("Bu yerda taxi chaqirish tartibi bo'ladi");
        } else if (user.user_lang === 'RUS') {
          await ctx.reply('–í–æ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏');
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async actionForUserContract(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.user_lang === 'UZB') {
        await ctx.reply("Bu yerda foydalanuvchi shartnomasi bo'ladi");
      } else if (user.user_lang === 'RUS') {
        await ctx.reply('–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ');
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async contactWithUs(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        if (user.user_lang === 'UZB') {
          await ctx.reply(
            "Bu yerda biz bilan bog'lanish uchun raqamlar va linklar bo'ladi",
          );
        } else if (user.user_lang === 'RUS') {
          await ctx.reply('–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–æ–º–µ—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏');
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async toMainMenu(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        if (user.user_lang === 'UZB') {
          await ctx.reply(uzReplyMessages.to_main_menu[1], {
            parse_mode: 'HTML',
            ...uzKeyboards.main_menu,
          });
        } else if (user.user_lang === 'RUS') {
          await ctx.reply(ruReplyMessages.to_main_menu[1], {
            parse_mode: 'HTML',
            ...ruKeyboards.main_menu,
          });
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async actionForChangeLang(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      // if (user.last_state === 'finish') {
      await user.update({ last_state: 'change_lang' });
      await ctx.reply('Tilni tanlang | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', {
        parse_mode: 'HTML',
        ...Markup.keyboard([["üá∫üáø O'zbek tili"], ['üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫']])
          .oneTime()
          .resize(),
      });
      // }
    } else {
      await ctx.reply('/start');
    }
  }

  async hearsPermanentAddresses(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if (user.last_state === 'finish') {
        const userAddresses = await this.usAddrRepo.findAll({
          where: { user_id: user.user_id },
        });
        if (userAddresses.length > 1) {
          if (user.user_lang === 'UZB') {
            await ctx.reply("Kerakli harakatlanish yo'nalishini tanlang");
          } else if (user.user_lang === 'RUS') {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è');
          }
          for (let i = 0; i < userAddresses.length - 1; i++) {
            for (let a = i + 1; a < userAddresses.length; a++) {
              if (user.user_lang === 'UZB') {
                await ctx.reply(
                  uzReplyMessages.in_my_addresses(
                    userAddresses[i].address_name,
                    userAddresses[a].address_name,
                  ),
                  {
                    parse_mode: 'HTML',
                    ...uzKeyboards.in_this_direction(
                      userAddresses[i].id,
                      userAddresses[a].id,
                    ),
                  },
                );
              } else if (user.user_lang === 'RUS') {
                await ctx.reply(
                  ruReplyMessages.in_my_addresses(
                    userAddresses[i].address_name,
                    userAddresses[a].address_name,
                  ),
                  {
                    parse_mode: 'HTML',
                    ...ruKeyboards.in_this_direction(
                      userAddresses[i].id,
                      userAddresses[a].id,
                    ),
                  },
                );
              }
            }
          }
          for (let i = userAddresses.length - 1; i > 0; i--) {
            for (let a = i - 1; a >= 0; a--) {
              if (user.user_lang === 'UZB') {
                await ctx.reply(
                  uzReplyMessages.in_my_addresses(
                    userAddresses[i].address_name,
                    userAddresses[a].address_name,
                  ),
                  {
                    parse_mode: 'HTML',
                    ...uzKeyboards.in_this_direction(
                      userAddresses[i].id,
                      userAddresses[a].id,
                    ),
                  },
                );
              } else if (user.user_lang === 'RUS') {
                await ctx.reply(
                  ruReplyMessages.in_my_addresses(
                    userAddresses[i].address_name,
                    userAddresses[a].address_name,
                  ),
                  {
                    parse_mode: 'HTML',
                    ...ruKeyboards.in_this_direction(
                      userAddresses[i].id,
                      userAddresses[a].id,
                    ),
                  },
                );
              }
            }
          }
        } else {
          if (user.user_lang === 'UZB') {
            await ctx.reply(
              "Doimiy manzillar bo'yicha harakatlanish uchun kamida ikkita manzil kiritilgan bo'lishi kerak",
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.reply(
              '–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∞–¥—Ä–µ—Å–∞',
            );
          }
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async hearsCallTaxi(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      // if (user.last_state === 'finish') {
      await user.update({ last_state: 'taxi' }); //==============
      await this.taxiRepo.create({
        user_id: user.user_id,
        taxi_call_type: 'taxi',
        taxi_state: 'from_location',
      });

      if (user.user_lang === 'UZB') {
        await ctx.reply(uzReplyMessages.call_taxi.about);
        await ctx.reply(uzReplyMessages.call_taxi.methods, {
          parse_mode: 'HTML',
          ...Markup.keyboard([
            [
              Markup.button.locationRequest('üìç Manzilni yuborish'),
              'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
            ],
          ])
            .oneTime()
            .resize(),
        });
      } else if (user.user_lang === 'RUS') {
        await ctx.reply(ruReplyMessages.call_taxi.about);
        await ctx.reply(ruReplyMessages.call_taxi.methods, {
          parse_mode: 'HTML',
          ...ruKeyboards.req_location,
        });
      }
      // }
    } else {
      await ctx.reply('/start');
    }
  }
  //=======================

  async delivery(ctx: Context, lang: string) {
    try {
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      if (user) {
        const taxi = await this.taxiRepo.create({
          user_id: String(ctx.from.id),
          taxi_call_type: 'delivery',
          taxi_state: 'from_location',
        });
        await user.update({ last_state: 'delivery' });
        let str1: string;
        let str2: string;
        let str3: string;
        let str4: string;
        if (lang === 'UZB') {
          str1 = `<b>¬´Lady Taxi¬ª</b> boti hozirda test rejimida ishlamoqda. Yetarli miqdordagi haydovchi ayollar yig'ilganidan so'ng to'liq rejimda faoliyat olib boriladi. Bizga qiziqish bildirganingiz uchun rahmat!`;
          str2 = `Jo'natma turgan manzilni quyidagi usullardan biri orqali yuboring:

1. ¬´üìç Manzilni yuborish¬ª tugmasini bosing
        
2. Telegramning üìé tugmasi orqali geolokatsiyani (–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, Location) tanlang
        
3. Manzilni botga xabar ko'rinishida yuboring`;
          str3 = `üìç Manzilni yuborish`;
          str4 = 'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish';
        } else {
          str1 = `<b>–ë–æ—Ç ¬´Lady Taxi¬ª </b>–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –û–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –Ω–∞–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π-–∂–µ–Ω—â–∏–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—è–≤–∏–ª–∏ –∫ –Ω–∞–º –∏–Ω—Ç–µ—Ä–µ—Å!`;
          str2 = `–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:

1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é¬ª
    
2. –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé –¢–µ–ª–µ–≥—Ä–∞–º–∞
    
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;
          str3 = `üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é`;
          str4 = 'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞';
        }
        await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
        await ctx.reply(str1, { parse_mode: 'HTML' });
        await ctx.reply(str2, {
          parse_mode: 'HTML',
          ...Markup.keyboard([[Markup.button.locationRequest(str3), str4]])
            .oneTime()
            .resize(),
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async canselled(ctx: Context) {
    try {
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          user_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });
      if (taxi) {
        taxi.taxi_state = 'cancelled';
        await taxi.save();
        await user.update({ last_state: 'finish' });
      }
      await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
      if (user?.user_lang === 'UZB') {
        await onMainUZB(ctx);
      } else {
        await onMainRUS(ctx);
      }
    } catch (error) {
      console.log(error);
    }
  }

  async onFromDelivery(ctx: Context) {
    try {
      let id: number;
      if ('match' in ctx) {
        id = Number(ctx.match[0].split('-')[2]);
      }
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          user_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });
      const place = await this.addressRepo.findOne({ where: { id } });
      await ctx.replyWithLocation(place.coordinate_lat, place.coordinate_lon);
      let str = [];
      if (user?.user_lang === 'UZB') {
        str = [
          "Jo'natma yetkazish manzilini yuborish uchun Telegramning üìé tugmasi orqali üìç geolokatsiyani (–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, Location) tanlang yoki manzilni botga ‚úèÔ∏è xabar ko'rinishida yuboring:",
          'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
        ];
      } else {
        str = [
          '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé –¢–µ–ª–µ–≥—Ä–∞–º–∞ –∏–ª–∏ ‚úèÔ∏è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
          'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
        ];
      }
      await ctx.reply(str[0], {
        parse_mode: 'HTML',
        ...Markup.keyboard([[str[1]]])
          .oneTime()
          .resize(),
      });
      taxi.from_lat = String(place.coordinate_lat);
      taxi.from_long = String(place.coordinate_lon);
      taxi.from_full_adr = `${place.address_name}, ${place.address_text}`;
      taxi.taxi_state = 'to_location';
      await taxi.save();
    } catch (error) {
      console.log(error);
    }
  }

  async onToDelivery(ctx: Context) {
    try {
      let id: number;
      if ('match' in ctx) {
        id = Number(ctx.match[0].split('-')[2]);
      }
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          user_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });
      const place = await this.addressRepo.findOne({ where: { id } });
      await ctx.replyWithLocation(place.coordinate_lat, place.coordinate_lon);
      let data = await axios.get(
        `https://nominatim.openstreetmap.org/reverse?lat=${place.coordinate_lat}&lon=${place.coordinate_lon}&format=json`,
      );
      let str: string[];

      var config = {
        method: 'GET',
        url: `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${taxi.from_lat}%2C${taxi.from_long}&destinations=${place.coordinate_lat}%2C${place.coordinate_lon}&key=${process.env.GOOGLE_API_KEY}`,
        headers: {},
      };
      const response = await axios(config);
      let distance_data = response.data;
      let distance = (
        distance_data.rows[0].elements[0].distance.value / 1000
      ).toFixed(1);
      let time = (
        distance_data.rows[0].elements[0].duration.value / 60
      ).toFixed();

      if (user?.dataValues.user_lang === 'UZB') {
        str = [
          'Manzillarni tasdiqlang',
          'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
          '‚úÖ Tasdiqlayman',
          `üî∞ Jo'natma turgan manzil: ${taxi.from_full_adr} \n\nüèÅ Jo'natmani yetkazish manzili: ${data.data.display_name} \n\nMasofa: ${distance} km\nVaqti: ${time} min`,
        ];
      } else {
        str = [
          '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞',
          'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
          '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é',
          `üî∞ –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: ${taxi.from_full_adr} \n\nüèÅ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${data.data.display_name} \n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º\n–í—Ä–µ–º—è: ${time} –º–∏–Ω`,
        ];
      }
      taxi.to_lat = String(place.coordinate_lat);
      taxi.to_long = String(place.coordinate_lon);
      taxi.to_full_adr = data.data.display_name;
      taxi.taxi_distance = Number(distance);
      taxi.taxi_time = Number(time);
      taxi.taxi_state = 'to_location';
      await taxi.save();
      await ctx.telegram.sendChatAction(ctx.from.id, 'typing');
      await ctx.reply(str[0], { ...Markup.removeKeyboard() });
      await ctx.reply(str[3], {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [
            { text: str[2], callback_data: 'accepted' },
            { text: str[1], callback_data: 'cancelled' },
          ],
        ]),
      });
    } catch (error) {
      console.log(error);
    }
  }
  async onAccepted(ctx: Context) {
    try {
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          user_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });
      let price;
      let min_price = parseInt(process.env.MIN_PRICE);
      let price_koef = parseFloat(process.env.PRICE_KOEF);
      let distance = taxi.taxi_distance * 1000;
      if (distance < 1000) {
        price = min_price;
      } else
        price =
          min_price +
          +(((distance - 1000) * price_koef) / 1000).toFixed() * 1000;
      taxi.taxi_price = price;
      taxi.taxi_state = 'waiting_driver';
      await taxi.save();
      let str = [];
      if (user?.user_lang === 'UZB') {
        str = [
          `Lady Taxi tomonidan taklif qilinayotgan narx: ${taxi.taxi_price} so'm.`,
          '‚úÖ Roziman',
          'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
        ];
      } else {
        str = [
          `–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –æ—Ç Lady Taxi: ${taxi.taxi_price} —Å—É–º.`,
          '‚úÖ –Ø —Å–æ–≥–ª–∞—Å–Ωa',
          'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
        ];
      }
      await ctx.sendChatAction('typing');
      await ctx.editMessageText(str[0], {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [
            { text: str[1], callback_data: 'confirmed' },
            { text: str[2], callback_data: 'cancelled' },
          ],
        ]),
      });
    } catch (error) {
      console.log(error);
    }
  }
  async onConfirmed(ctx: Context) {
    try {
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      let strDriver = [];
      let strPassenger = [];
      const taxi = await this.taxiRepo.findOne({
        where: {
          user_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });
      if (taxi?.taxi_state !== 'waiting_driver') {
        return;
      }
      if (user?.user_lang == 'UZB') {
        strPassenger = [`Kuting! Taksi qidirilmoqda...`, 'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish'];
      } else {
        strPassenger = [
          `–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! \n–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...`,
          'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
        ];
      }

      await ctx.sendChatAction('typing');
      await ctx.editMessageText(strPassenger[0], {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [{ text: strPassenger[1], callback_data: 'cancelled' }],
        ]),
      });
      const drivers = await this.driverRepo.findAll({
        where: { work_status: true },
      });
      if (drivers.length > 0) {
        for (let driver of drivers) {
          let userDriver = await this.userRepo.findOne({
            where: { user_id: driver.user_id },
          });
          if (!taxi.block_drivers.includes(driver.user_id)) {
            if (userDriver?.user_lang == 'UZB') {
              strDriver = [
                `üî∞ Jo'natma turgan manzil: ${taxi.from_full_adr} \n\nüèÅ Jo'natmani yetkazish manzili: ${taxi.to_full_adr} \n\nMasofa: ${taxi.taxi_distance} km\nVaqti: ${taxi.taxi_time} min`,
                "üìç Jo'nash manzilini ko'rish",
                `‚úÖ ${taxi.taxi_price} so'mga roziman`,
              ];
            } else {
              strDriver = [
                `üî∞ –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: ${taxi.from_full_adr} \n\nüèÅ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${taxi.to_full_adr} \n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${taxi.taxi_distance} –∫–º\n–í—Ä–µ–º—è: ${taxi.taxi_time} –º–∏–Ω`,
                'üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                `‚úÖ –Ø –æ—Ç–≤–µ–∑—É –Ω–∞ ${taxi.taxi_price} —Å—É–º`,
              ];
            }

            await ctx.telegram.sendMessage(driver.user_id, strDriver[0], {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                [
                  {
                    text: strDriver[1],
                    callback_data: `show_location-${taxi.from_lat}-${taxi.from_long}`,
                  },
                ],
                [
                  {
                    text: strDriver[2],
                    callback_data: `confirm_driver-${taxi.id}`,
                  },
                ],
              ]),
            });
          }
        }
      }
    } catch (error) {
      console.log(error);
    }
  }
  async onConfirmDriver(ctx: Context) {
    let taxi_id;
    if ('match' in ctx) {
      taxi_id = +ctx.match['input'].split('-')[1];
    }
    try {
      const driverUser = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      await driverUser.update({ last_state: 'driver' });
      let strPassenger = [];
      let strDriver = [];
      const taxi = await this.taxiRepo.findOne({
        where: {
          id: taxi_id,
        },
      });
      const passenger = await this.userRepo.findOne({
        where: { user_id: String(taxi.user_id) },
      });
      const user_taxi = await this.taxiRepo.findOne({
        where: {
          user_id: taxi.user_id,
        },
        order: [['createdAt', 'DESC']],
      });

      const driver = await this.driverRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });

      if (driverUser?.user_lang == 'UZB') {
        strDriver = [
          `Yo'lovchini boshqa taksi haydovchisi tanlashga ulgurdi üòî. Tayyor turing! Tez orada sizga yangi yo'lovchi topamiz üîç`,
          "Masofani hisoblash uchun 'üìç Geolokatsiyani yuborish' tugmasini bosing yoki üìé Telegram tugmasi yordamida geolokatsiyani tanlang!",
          'üìç Manzilni yuborish',
          'Mashina buzilib qoldi üòî',
        ];
      } else {
        strDriver = [
          `–í–∑—è–ª –¥—Ä—É–≥–æ–π —Ç–∞–∫—Å–∏—Å—Ç üòî. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã! –ú—ã —Å–∫–æ—Ä–æ –Ω–∞–π–¥–µ–º –≤–∞–º –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîç`,
          '–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é¬ª –∏–ª–∏ –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é  —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé –¢–µ–ª–µ–≥—Ä–∞–º–∞!',
          'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
          '–ú–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–ª–∞—Å—å üòî',
        ];
      }
      if (passenger?.user_lang == 'UZB') {
        strPassenger = [
          'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
          `Haydovchi ismi: ${driver.first_name} \nTelefon raqami: ${driver.phone_number} \nTelegram username: @${driver.username} \nAvtomobil modeli: ${driver.car_model} \nAvtomobil rangi: ${driver.car_color} \nAvtomobil raqami: ${driver.car_number} \nXizmat naxi: ${taxi.taxi_price}`,
        ];
      } else {
        strPassenger = [
          'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
          `–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è: ${driver.first_name} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${driver.phone_number} \n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: @${driver.username} \n–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${driver.car_model} \n–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${driver.car_color} \n–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${driver.car_number} \n–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ${taxi.taxi_price}`,
        ];
      }

      if (taxi.taxi_state !== 'waiting_driver' || user_taxi.id !== taxi.id) {
        ctx.reply(strDriver[0]);
        return;
      }

      await ctx.sendChatAction('typing');
      await ctx.telegram.sendMessage(+taxi.user_id, strPassenger[1], {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [{ text: strPassenger[0], callback_data: 'cancelled_taxi' }],
        ]),
      });

      await ctx.reply(strDriver[1], {
        parse_mode: 'HTML',
        ...Markup.keyboard([
          [Markup.button.locationRequest(strDriver[2])],
          [strDriver[3]],
        ]).resize(),
      });
      taxi.driver_id = driver.user_id;
      taxi.taxi_state = 'select_driver';
      taxi.save();
    } catch (error) {
      console.log(error);
    }
  }
  async onShowLocation(ctx: Context) {
    try {
      let lat: number;
      let lon: number;
      if ('match' in ctx) {
        lat = +ctx.match['input'].split('-')[1];
        lon = +ctx.match['input'].split('-')[2];
      }
      ctx.replyWithLocation(lat, lon);
    } catch (error) {
      console.log(error);
    }
  }

  async cancelled_taxi(ctx: Context) {
    try {
      let strUser = [];
      let strDriver = [];
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          user_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });
      if (
        taxi.taxi_state == 'select_driver' ||
        taxi.taxi_state == 'driver_on_from_location'
      ) {
        const driver = await this.userRepo.findOne({
          where: { user_id: taxi.driver_id },
        });
        if (user?.user_lang == 'UZB') {
          strUser = [
            'Bu haydovchi bekor qilindi ',
            '‚úÖ Yangi taxi chaqirish',
            'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
          ];
        } else {
          strUser = [
            '–≠—Ç–æ—Ç —à–æ—Ñ—ë—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω',
            '‚úÖ –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ —Ç–∞–∫—Å–∏',
            'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
          ];
        }
        if (driver?.user_lang === 'UZB') {
          strDriver = [
            "Yo'lovchi taksini bekor qildi. Tez orada sizga yangi yo'lovchilar jo'natamiz. Tayyor turing.",
            'Dam olish üõã',
          ];
        } else {
          strDriver = [
            '–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–∞–∫—Å–∏. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–æ–≤—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è.',
            'O—Ç–¥—ã—Ö–∞—Ç—å üõã',
          ];
        }
        const block_drivers = taxi.dataValues.block_drivers;
        block_drivers.push(driver.user_id);
        taxi.taxi_state = 'waiting_driver';
        taxi.driver_id = null;
        await taxi.update({
          block_drivers: block_drivers,
        });
        await taxi.changed('block_drivers', true);
        await taxi.save();
        await ctx.sendChatAction('typing');
        await ctx.reply(strUser[0], {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [
              { text: strUser[1], callback_data: 'confirmed' },
              { text: strUser[2], callback_data: 'cancelled' },
            ],
          ]),
        });
        await ctx.telegram.sendMessage(driver.user_id, strDriver[0], {
          parse_mode: 'HTML',
          ...Markup.keyboard([[strDriver[1]]]).resize(),
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async brokenCar(ctx: Context) {
    let strUser = [];
    let strDriver = [];

    const driver = await this.userRepo.findOne({
      where: { user_id: String(ctx.from.id) },
    });
    const taxi = await this.taxiRepo.findOne({
      where: {
        driver_id: String(ctx.from.id),
      },
      order: [['createdAt', 'DESC']],
    });

    const user = await this.userRepo.findOne({
      where: { user_id: taxi.user_id },
    });

    if (
      taxi.taxi_state == 'select_driver' ||
      taxi.taxi_state == 'driver_on_from_location'
    ) {
      if (driver.user_lang == 'UZB') {
        strDriver = [
          "Avtomobilingizni imkon qadar tezroq ta'mirlang va haydovchilar safiga qayting.",
          'Dam olish üõã',
        ];
      } else {
        strDriver = [
          '–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä—è–¥—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π.',
          'O—Ç–¥—ã—Ö–∞—Ç—å üõã',
        ];
      }

      if (user?.user_lang == 'UZB') {
        strUser = [
          'Haydovchining mashinasi buzilib qoldi',
          '‚úÖ Yangi taxi chaqirish',
          'üôÖ‚Äç‚ôÄÔ∏è Bekor qilish',
        ];
      } else {
        strUser = [
          '–£ –≤–æ–¥–∏—Ç–µ–ª—è —Å–ª–æ–º–∞–ª–∞—Å—å –º–∞—à–∏–Ω–∞',
          '‚úÖ –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ —Ç–∞–∫—Å–∏',
          'üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞',
        ];
      }
      const block_drivers = taxi.dataValues.block_drivers;
      block_drivers.push(driver.user_id);
      taxi.taxi_state = 'waiting_driver';
      taxi.driver_id = null;
      await taxi.update({
        block_drivers: block_drivers,
      });
      await taxi.changed('block_drivers', true);
      await taxi.save();
      await ctx.sendChatAction('typing');
      await ctx.telegram.sendMessage(user.user_id, strUser[0], {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [
            { text: strUser[1], callback_data: 'confirmed' },
            { text: strUser[2], callback_data: 'cancelled' },
          ],
        ]),
      });
      await ctx.reply(strDriver[0], {
        parse_mode: 'HTML',
        ...Markup.keyboard([[strDriver[1]]]).resize(),
      });
    }
  }

  async onFromLocation(ctx: Context) {
    let strUser = [];
    let strDriver = [];

    const driver = await this.userRepo.findOne({
      where: { user_id: String(ctx.from.id) },
    });
    const taxi = await this.taxiRepo.findOne({
      where: {
        driver_id: String(ctx.from.id),
      },
      order: [['createdAt', 'DESC']],
    });

    const user = await this.userRepo.findOne({
      where: { user_id: taxi.user_id },
    });

    if (taxi.taxi_state == 'driver_on_from_location') {
      if (driver.user_lang == 'UZB') {
        strDriver = [
          `Yurishni boshlaganingizda "Yurishni boshladik" knopkasini bosing`,
          'Yurishni boshladik',
        ];
      } else {
        strDriver = [
          '–ö–æ–≥–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ —Ö–æ–¥–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ—Å—å¬ª.',
          '–¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–æ—Å—å',
        ];
      }

      if (user?.user_lang == 'UZB') {
        strUser = ['Taksi yetib keldi'];
      } else {
        strUser = ['–¢–∞–∫—Å–∏ –ø—Ä–∏–±—ã–ª–æ'];
      }

      taxi.taxi_state = 'start_taxi_action';
      await taxi.save();

      await ctx.sendChatAction('typing');
      await ctx.reply(strDriver[0], {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [{ text: strDriver[1], callback_data: 'start_location' }],
        ]),
      });

      await ctx.telegram.sendChatAction(+user.user_id, 'typing');
      await ctx.telegram.sendMessage(+user.user_id, strUser[0]);
    }
  }

  async start_taxi_action(ctx: Context) {
    try {
      let strDriver = [];

      const driver = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          driver_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });

      const user = await this.userRepo.findOne({
        where: { user_id: taxi.user_id },
      });

      if (taxi.taxi_state == 'start_taxi_action') {
        await taxi.update({ taxi_start_time: new Date() });
        if (driver.user_lang == 'UZB') {
          strDriver = [
            "Quyidagi lokatsiyaga borish kerak üëáüèΩ. Yetib borganingizda 'Yetib bordik' knopkasini bosing",
            'Yetib bordik',
          ];
        } else {
          strDriver = [
            '–í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é üëáüèΩ. –ö–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–µ–¥–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú—ã –ø—Ä–∏–±—ã–ª–∏',
            '–ú—ã –ø—Ä–∏–µ—Ö–∞–ª–∏',
          ];
        }
        taxi.taxi_state = 'finish_location';
        await taxi.save();

        await ctx.sendChatAction('typing');
        await ctx.reply(strDriver[0], {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [{ text: strDriver[1], callback_data: 'finish_location' }],
          ]),
        });
        await ctx.sendLocation(+taxi.to_lat, +taxi.to_long);
      }
    } catch (error) {
      console.log(error);
    }
  }
  async finish_location(ctx: Context) {
    try {
      let strDriver = [];
      let strPossenger = [];

      const driver = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });
      const taxi = await this.taxiRepo.findOne({
        where: {
          driver_id: String(ctx.from.id),
        },
        order: [['createdAt', 'DESC']],
      });

      const user = await this.userRepo.findOne({
        where: { user_id: taxi.user_id },
      });

      if (taxi.taxi_state == 'finish_location') {
        await taxi.update({ taxi_end_time: new Date() });
        await user.update({ last_state: 'finish' });
        await driver.update({ last_state: 'finish' });
        if (driver.user_lang === 'UZB') {
          strDriver = [
            "Salomat bo'ling. Biz tez orada sizga yangi yo'lovchi topamiz",
            'Dam olish üõã',
          ];
        } else {
          strDriver = [
            '¬´–ë—É–¥—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ã. –°–∫–æ—Ä–æ –º—ã –Ω–∞–π–¥–µ–º –≤–∞–º –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞¬ª,',
            'O—Ç–¥—ã—Ö–∞—Ç—å üõã',
          ];
        }
        if (user.user_lang === 'UZB') {
          strPossenger = [
            `Sizga hizmat ko'rsatishdan hursand bo'lamiz. \nHaydovchi ko'rsatgan hizmatni baholang`,
          ];
        } else {
          strPossenger = [
            `–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —Å–ª—É–∂–∏—Ç—å –≤–∞–º. \n–û—Ü–µ–Ω–∏—Ç–µ —É—Å–ª—É–≥—É –≤–æ–¥–∏—Ç–µ–ª—è`,
          ];
        }
        taxi.taxi_state = 'finished_full';
        await taxi.save();

        await ctx.sendChatAction('typing');
        await ctx.reply(strDriver[0], {
          parse_mode: 'HTML',
          ...Markup.keyboard([[strDriver[1]]]).resize(),
        });

        await ctx.telegram.sendMessage(+user.user_id, strPossenger[0], {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [
              { text: '1Ô∏è‚É£', callback_data: 'marking-1' },
              { text: '2Ô∏è‚É£', callback_data: 'marking-2' },
              { text: '3Ô∏è‚É£', callback_data: 'marking-3' },
              { text: '4Ô∏è‚É£', callback_data: 'marking-4' },
              { text: '5Ô∏è‚É£', callback_data: 'marking-5' },
            ],
          ]),
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async marking(ctx: Context) {
    try {
      const user = await this.userRepo.findOne({
        where: { user_id: String(ctx.from.id) },
      });

      if (user.user_lang == 'UZB') {
        await onMainUZB(ctx);
      } else {
        await onMainRUS(ctx);
      }
    } catch (error) {
      console.log('salom');
    }
  }

  //====================

  async onDriver(ctx: Context) {
    const driver = await this.driverRepo.findOne({
      where: {
        user_id: `${ctx.from.id}`,
      },
    });
    const user = await this.userRepo.findOne({
      where: {
        user_id: `${ctx.from.id}`,
      },
    });
    if (driver) {
      if (user.user_lang == 'UZB') {
        return this.workStatusTrue(ctx, 'UZB');
      } else {
        return this.workStatusFalse(ctx, 'RUS');
      }
    } else if (!user) {
      await ctx.replyWithHTML(
        '<b>Lady Taxi xizmatining haydovchi rejimiga xush kelibsiz</b>',
      );
      await ctx.replyWithHTML(
        "Haydovchi rejimiga o'tish uchun avval Mijoz rejimiga o'tib profilning Ism va Telefon ma'lumotlarini to'liq kiriting.",
      );
    } else {
      await this.driverRepo.create({
        user_id: `${user.user_id}`,
        first_name: `${user.first_name}`,
        last_name: `${user.last_name}`,
        username: `${user.username}`,
        user_lang: `${user.user_lang}`,
        phone_number: `${user.phone_number}`,
      });
      if (user.user_lang == 'UZB') {
        await ctx.reply(
          'Lady Taxi xizmatining haydovchi rejimiga xush kelibsiz !',
        );
        await ctx.reply(
          "Lady Taxi xizmatida haydovchi sifatida ro'yxatdan o'tish uchun ¬´Ro'yxatdan o'tish¬ª tugmasini bosing.",
          {
            parse_mode: 'HTML',
            ...Markup.keyboard(["üë©üèº‚Äçüíª Ro'yxatdan o'tish"]).oneTime().resize(),
          },
        );
      } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º –¢–∞–∫—Å–∏—Å—Ç!');
        await ctx.reply(
          '–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å–µ Lady Taxi, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª.',
          {
            parse_mode: 'HTML',
            ...Markup.keyboard(['üë©üèº‚Äçüíª –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']).oneTime().resize(),
          },
        );
      }
    }
  }

  async registrationDriver(ctx: Context, lang: String) {
    await this.userRepo.update(
      {
        last_state: 'car_number',
      },
      {
        where: {
          user_id: `${ctx.from.id}`,
        },
      },
    );

    if (lang == 'UZB') {
      await ctx.reply('Avtomobil raqamini kiriting', {
        parse_mode: 'HTML',
      });
    } else {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è', {
        parse_mode: 'HTML',
      });
    }
  }

  async verifyDriver(ctx: Context) {
    let index;
    if ('match' in ctx) {
      const message = ctx.match[0];
      index = message.split('=')[1];
    }
    const idUser = await this.userRepo.findOne({
      where: {
        user_id: `${index}`,
      },
    });
    console.log(index);
    console.log(idUser);
    if (idUser.user_lang == 'UZB') {
      await ctx.telegram.sendMessage(
        `${index}`,
        'Admin sizga ruxsat berdi. Statusingizni tekshirib oling !',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            Markup.button.callback(
              '‚òëÔ∏è Statusni tekshirish',
              'checkDriverStatus',
            ),
          ]),
        },
      );
    } else {
      await ctx.telegram.sendMessage(
        `${index}`,
        '–ê–¥–º–∏–Ω –¥–∞–ª –≤–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å !',
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            Markup.button.callback('‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ', 'checkDriverStatus'),
          ]),
        },
      );
    }
  }

  async notAccesDriver(ctx: Context) {
    let index;
    if ('match' in ctx) {
      const message = ctx.match[0];
      index = message.split('=')[1];
    }
    const idUser = await this.userRepo.findOne({
      where: {
        user_id: `${index}`,
      },
    });
    if (idUser.user_lang == 'UZB') {
      await ctx.telegram.sendMessage(
        `${index}`,
        "Afsuski admin sizga ruxsat bermadi, Ma'lum muddatdan so'ng qayta urinib ko'ring ! ",
      );
    } else {
      await ctx.telegram.sendMessage(
        `${index}`,
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–¥–º–∏–Ω –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏!',
      );
    }
  }

  async checkDriverStatus(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: {
        user_id: `${ctx.from.id}`,
      },
    });
    if (user.user_lang == 'UZB') {
      await ctx.reply(
        "Tabriklaymiz ! Siz <b>Lady Taxy</b> haydovchilari safiga qo'shildingiz !\n Hozirdan ishni boshlashingiz mumkin !",
        {
          parse_mode: 'HTML',
          ...Markup.keyboard([
            'üöï Hozirdan ishlayman !',
            'üõã Hozircha dam olaman',
          ])
            .oneTime()
            .resize(),
        },
      );
    } else {
      await ctx.reply(
        '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ä—è–¥—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π <b>Lady Taxi</b>!\n –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
        {
          parse_mode: 'HTML',
          ...Markup.keyboard(['üöï –Ø —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é !', 'üõã –Ø –ø–æ–∫–∞ –æ—Ç–¥–æ—Ö–Ω—É'])
            .oneTime()
            .resize(),
        },
      );
    }
  }

  async workStatusTrue(ctx: Context, lang: String) {
    await this.driverRepo.update(
      {
        last_state: 'ReadyToWork',
        work_status: true,
      },
      {
        where: {
          user_id: `${ctx.from.id}`,
        },
      },
    );
    if (lang == 'UZB') {
      await ctx.reply('üöñ Kuting, mijozlar chiqishi bilan sizga sms yozasiz', {
        parse_mode: 'HTML',
        ...Markup.keyboard([["‚õîÔ∏è Ishni to'xtatish"]])
          .oneTime()
          .resize(),
      });
    } else {
      await ctx.reply(
        'üöñ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã —É–π–¥—É—Ç, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –°–ú–°',
        {
          parse_mode: 'HTML',
          ...Markup.keyboard([['‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É']])
            .oneTime()
            .resize(),
        },
      );
    }
  }

  async workStatusFalse(ctx: Context, lang: String) {
    await this.driverRepo.update(
      {
        last_state: 'offWork',
        work_status: false,
      },
      {
        where: {
          user_id: `${ctx.from.id}`,
        },
      },
    );
    if (lang == 'UZB') {
      await ctx.reply('üöñ Tezroq ishga qayting !', {
        parse_mode: 'HTML',
        ...Markup.keyboard([['üöï Hozirdan ishlayman !']])
          .oneTime()
          .resize(),
      });
    } else {
      await ctx.reply('üöñ –°–∫–æ—Ä–µ–π –≤–µ—Ä–Ω–∏—Å—å –∫ —Ä–∞–±–æ—Ç–µ!', {
        parse_mode: 'HTML',
        ...Markup.keyboard([['üöï –Ø —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é !']])
          .oneTime()
          .resize(),
      });
    }
  }

  async noConfirmtaxi(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      const taxi = await this.taxiRepo.findOne({
        where: { user_id: user.user_id, taxi_call_type: 'taxi' },
        order: [['createdAt', 'DESC']],
      });
      if (taxi) {
        await taxi.update({ taxi_state: 'cancelled' });
        await user.update({ last_state: 'finish' });
        if (user.user_lang === 'UZB') {
          await onMainUZB(ctx);
        } else if (user.user_lang === 'RUS') {
          await onMainRUS(ctx);
        }
      } else {
        await ctx.reply('/start');
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async ConfirmTaxi(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      const taxi = await this.taxiRepo.findOne({
        where: { user_id: user.user_id, taxi_call_type: 'taxi' },
        order: [['createdAt', 'DESC']],
      });
      if (taxi) {
        if (taxi.info === 'confirm_location') {
          await taxi.update({ info: 'confirm_price' });
          let price;
          let min_price = parseInt(process.env.MIN_PRICE);
          let price_koef = parseFloat(process.env.PRICE_KOEF);
          let distance = taxi.taxi_distance * 1000;
          if (distance < 1000) {
            price = min_price;
          } else
            price =
              min_price +
              +(((distance - 1000) * price_koef) / 1000).toFixed() * 1000;
          await taxi.update({ taxi_price: price });
          if (user.user_lang === 'UZB') {
            await ctx.telegram.editMessageText(
              user.user_id,
              taxi.message_id,
              null,
              uzReplyMessages.suggested_price(taxi.taxi_price),
              { parse_mode: 'HTML', ...uzKeyboards.iagree },
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.telegram.editMessageText(
              user.user_id,
              taxi.message_id,
              null,
              ruReplyMessages.suggested_price(taxi.taxi_price),
              { parse_mode: 'HTML', ...ruKeyboards.iagree },
            );
          }
        }
      } else {
        await ctx.reply('/start');
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async ConfirmPrice(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      const taxi = await this.taxiRepo.findOne({
        where: { user_id: user.user_id, taxi_call_type: 'taxi' },
        order: [['createdAt', 'DESC']],
      });
      if (taxi) {
        if (taxi.info === 'confirm_price') {
          await taxi.update({ info: 'find_car' });

          const drivers = await this.driverRepo.findAll({
            where: { work_status: true },
          });
          if (drivers.length) {
            for (let driver of drivers) {
              let userDriver = await this.userRepo.findOne({
                where: { user_id: driver.user_id },
              });
              if (!taxi.block_drivers.includes(driver.user_id)) {
                if (userDriver?.user_lang == 'UZB') {
                  await ctx.telegram.sendMessage(
                    userDriver.user_id,
                    `üî∞ Yo'lovchi turgan manzil: ${taxi.from_full_adr} \n\nüèÅ Yo'lovchini yetkazish manzili: ${taxi.to_full_adr} \n\nMasofa: ${taxi.taxi_distance} km\nVaqti: ${taxi.taxi_time} min`,
                    {
                      parse_mode: 'HTML',
                      ...Markup.inlineKeyboard([
                        Markup.button.callback(
                          "üìç Jo'nash manzilini ko'rish",
                          `show_location-${taxi.from_lat}-${taxi.from_long}`,
                        ),
                        Markup.button.callback(
                          `‚úÖ ${taxi.taxi_price} so'mga roziman`,
                          `iwilltake=${taxi.id}`,
                        ),
                      ]),
                    },
                  );
                } else if (userDriver.user_lang === 'RUS') {
                  await ctx.telegram.sendMessage(
                    userDriver.user_id,
                    `üî∞ Yo'lovchi turgan manzil: ${taxi.from_full_adr} \n\nüèÅ Yo'lovchini yetkazish manzili: ${taxi.to_full_adr} \n\nMasofa: ${taxi.taxi_distance} km\nVaqti: ${taxi.taxi_time} min`,
                    {
                      parse_mode: 'HTML',
                      ...Markup.inlineKeyboard([
                        Markup.button.callback(
                          "üìç Jo'nash manzilini ko'rish",
                          `show_location-${taxi.from_lat}-${taxi.from_long}`,
                        ),
                        Markup.button.callback(
                          `‚úÖ ${taxi.taxi_price} so'mga roziman`,
                          `iwilltake=${taxi.id}`,
                        ),
                      ]),
                    },
                  );
                }
              }
            }
          }

          if (user.user_lang === 'UZB') {
            await ctx.telegram.editMessageText(
              user.user_id,
              taxi.message_id,
              null,
              uzReplyMessages.waiting_find_taxi,
              {
                parse_mode: 'HTML',
                ...uzKeyboards.cancel_inline,
              },
            );
          } else if (user.user_lang === 'RUS') {
            await ctx.telegram.editMessageText(
              user.user_id,
              taxi.message_id,
              null,
              ruReplyMessages.waiting_find_taxi,
              {
                parse_mode: 'HTML',
                ...ruKeyboards.cancel_inline,
              },
            );
          }
        }
      } else {
        await ctx.reply('/start');
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async confirmInDriverAndSendHisToUser(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('match' in ctx) {
        const driver = await this.driverRepo.findOne({
          where: { user_id: user.user_id },
        });
        if (driver) {
          const id = ctx.match[0].slice(10);
          const taxi = await this.taxiRepo.findOne({ where: { id: +id } });
          await user.update({ last_state: 'driver' });
          if (taxi) {
            if (taxi.info === 'find_car') {
              await taxi.update({
                driver_id: driver.user_id,
                info: 'finish',
                taxi_state: 'select_driver',
              });
              const user = await this.userRepo.findOne({
                where: { user_id: taxi.user_id },
              });
              if (user) {
                if (user.user_lang === 'UZB') {
                  await ctx.telegram.sendMessage(
                    user.user_id,
                    uzReplyMessages.about_driver__for_user(
                      driver.first_name,
                      driver.phone_number,
                      driver.car_model,
                      driver.car_color,
                      driver.car_number,
                      taxi.taxi_price,
                    ),
                  );
                } else if (user.user_lang === 'RUS') {
                  await ctx.telegram.sendMessage(
                    user.user_id,
                    ruReplyMessages.about_driver__for_user(
                      driver.first_name,
                      driver.phone_number,
                      driver.car_model,
                      driver.car_color,
                      driver.car_number,
                      taxi.taxi_price,
                    ),
                  );
                }
              }

              await ctx.reply(uzReplyMessages.req_calculate_distance);
            }
          } else {
            await ctx.reply('/start');
          }
        } else {
          await ctx.reply('/start');
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async confirmInMyAddresses(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('match' in ctx) {
        console.log(ctx.match[0]);
        const arr = ctx.match[0].split('=');
        const from = arr[1];
        const to = arr[3];
        console.log(from, to);
        const fromAd = await this.usAddrRepo.findOne({ where: { id: from } });
        const toAd = await this.usAddrRepo.findOne({ where: { id: to } });
        const taxi = await Taxi.create({
          user_id: user.user_id,
          from_full_adr: fromAd.full_address,
          from_lat: fromAd.lat,
          from_long: fromAd.lon,
          to_full_adr: toAd.full_address,
          to_lat: toAd.lat,
          to_long: toAd.lon,
          taxi_call_type: 'taxi',
        });
        var config = {
          method: 'GET',
          url: `https://maps.googleapis.com/maps/api/distancematrix/json?origins=${taxi.from_lat}%2C${taxi.from_long}&destinations=${taxi.to_lat}%2C${taxi.to_long}&key=${process.env.GOOGLE_API_KEY}`,
          headers: {},
        };
        const response = await axios(config);
        let distance_data = response.data;
        let distance = (
          distance_data.rows[0].elements[0].distance.value / 1000
        ).toFixed(1);
        let time = (
          distance_data.rows[0].elements[0].duration.value / 60
        ).toFixed();

        taxi.update({
          taxi_distance: +distance,
          taxi_time: +time,
          taxi_state: 'driver',
          info: 'confirm_location',
        });
        await taxi.save();

        if (user.user_lang === 'UZB') {
          await ctx.reply('Manzillarni tasdiqlang');
          const message = await ctx.reply(
            `üî∞ Jo'nash manzilingiz: ${taxi.from_full_adr}\n\nüèÅ Borish manzilingiz: ${taxi.to_full_adr}\n\nMasofa: ${distance} km\nVaqti: ${time} min`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                Markup.button.callback('‚úÖ Tasdiqlayman', 'okconfirmlocation'),
                Markup.button.callback('üôÖ‚Äç‚ôÄÔ∏è Bekor qilish', 'noconfirmlocation'),
              ]),
            },
          );
          taxi.update({ message_id: message.message_id });
          await taxi.save();
        } else if (user.user_lang === 'RUS') {
          await ctx.reply('Manzillarni tasdiqlang');
          const message = await ctx.reply(
            `üî∞ –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${taxi.from_full_adr}\n\nüèÅ –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${taxi.to_full_adr}\n\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance} –∫–º\n–í—Ä–µ–º—è: ${time} –º–∏–Ω`,
            {
              parse_mode: 'HTML',
              ...Markup.inlineKeyboard([
                Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', 'okconfirmlocation'),
                Markup.button.callback('üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', 'noconfirmlocation'),
              ]),
            },
          );
          taxi.update({ message_id: message.message_id });
          await taxi.save();
        }
      } else {
        await ctx.reply('/start');
      }
    }
  }

  async hearsMicroBus(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      const busDirections = await this.microbusRepo.findAll();
      let directions = [];
      for (let i = 0; i < busDirections.length; i++) {
        directions.push([
          Markup.button.callback(
            `${busDirections[i].full_direction_names}`,
            `seethis=${busDirections[i].id}`,
          ),
        ]);
      }
      if (user.user_lang === 'UZB') {
        await ctx.reply("Mavjud yo'nalishlar", {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([...directions]),
        });
      } else if (user.user_lang === 'RUS') {
        await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã', {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([...directions]),
        });
      }
    } else {
      await ctx.reply('/start');
    }
  }

  async showBusDirection(ctx: Context) {
    const user = await this.userRepo.findOne({
      where: { user_id: `${ctx.from.id}` },
    });
    if (user) {
      if ('match' in ctx) {
        const id = ctx.match[0].split('=')[1];
        const busDirection = await this.microbusRepo.findOne({
          where: { id: +id },
        });
        // console.log(busDirection);
        if (user.user_lang === 'UZB') {
          // console.log(__dirname+busDirection.photo);
          const str = `üöç Yo'nalish nomi: ${busDirection.full_direction_names}\nüïê Qatnov vaqti: ${busDirection.work_time} gacha\nüöé Mikroavtobuslar soni: ${busDirection.total_busses} ta\nüõ£ Masofa: ${busDirection.direction_distance} km\nüí∑ Narxi: ${busDirection.price} so'm\n‚è≥ Borish vaqti: ${busDirection.finish_time} min`;
          await ctx.replyWithPhoto(
            { source: __dirname + '/..' + busDirection.photo },
            {
              caption: str,
              ...Markup.inlineKeyboard([
                [
                  Markup.button.callback(
                    `${busDirection.full_direction_names.split('-')[0]}`,
                    `show_location-${busDirection.from_coord}`,
                  ),
                ],
                [
                  Markup.button.callback(
                    `${busDirection.full_direction_names.split('-')[1]}`,
                    `show_location-${busDirection.to_coord}`,
                  ),
                ],
              ]),
            },
          );
        } else if (user.user_lang === 'RUS') {
          const str = `üöç –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${busDirection.full_direction_names}\nüïê –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: –¥–æ ${busDirection.work_time}\nüöé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–∫: –¥–æ ${busDirection.total_busses}\nüõ£ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${busDirection.direction_distance} –∫–º\nüí∑ –¶–µ–Ω–∞: ${busDirection.price} —Å–æ–º\n‚è≥ –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: ${busDirection.finish_time} –º–∏–Ω`;
          await ctx.replyWithPhoto(
            { source: __dirname + '/..' + busDirection.photo },
            {
              caption: str,
              ...Markup.inlineKeyboard([
                [
                  Markup.button.callback(
                    `${busDirection.full_direction_names.split('-')[0]}`,
                    `show_location-${busDirection.from_coord}`,
                  ),
                ],
                [
                  Markup.button.callback(
                    `${busDirection.full_direction_names.split('-')[1]}`,
                    `show_location-${busDirection.to_coord}`,
                  ),
                ],
              ]),
            },
          );
        }
      }
    } else {
      await ctx.reply('/start');
    }
  }
}
